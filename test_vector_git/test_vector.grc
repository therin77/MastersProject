options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: 'toDO

      -add autocorr function'
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: testautocorrelationfunction
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 16.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1000'
    comment: ''
    freq: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [56, 176.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_1
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1000'
    comment: ''
    freq: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: 3.14*.5
    samp_rate: samp_rate
    showports: 'False'
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 384.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: C:\Users\Kate\OSUProject\MastersProject\test_file
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1024, 448.0]
    rotation: 0
    state: disabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 80.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, additionFlag=True):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Add or Multiply Block',   # will show up in GRC\n\
      \            in_sig=[np.complex64, np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n        # if an attribute with the same name as a parameter is found,\n\
      \        # a callback is registered (properties work, too).\n        self.additionFlag\
      \ = additionFlag\n\n    def work(self, input_items, output_items):\n       \
      \ \"\"\"example: multiply with constant\"\"\"\n\n        if self.additionFlag:\n\
      \            output_items[0][:] = input_items[0][:] + input_items[1][:]\n  \
      \      else:\n            output_items[0][:] = input_items[0][:] * input_items[1][:]\n\
      \n        return len(output_items[0])\n"
    additionFlag: 'True'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Add or Multiply Block', 'blk', [('additionFlag', 'True')], [('0',
      'complex', 1), ('1', 'complex', 1)], [('0', 'complex', 1)], 'Embedded Python
      Block example - a simple multiply const', ['additionFlag'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 268.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\n\"\"\"\nCorrelation/Sync Block\nDeveloped by Kate Gothberg\n\
      Last Edited: 5/9/25\n\n\"\"\"\n\n\nimport numpy as np\nfrom gnuradio import\
      \ gr\n\n\nclass blk(gr.sync_block):\n    \n    \"\"\"\n    initialize the block\n\
      \    params:\n        in_sig: input samples\n        out_sig: output samples\n\
      \        window: number of samples to correlate over\n    \"\"\"\n    def __init__(self,\
      \ window=1.0):  \n        gr.sync_block.__init__(\n            self,\n     \
      \       name='Correlation/Synch Block', \n            in_sig=[np.complex64],\n\
      \            out_sig=[np.complex64]\n        )\n        self.window = window\n\
      \n    \"\"\"\n    functional code over samples\n    \"\"\"\n    def work(self,\
      \ input_items, output_items):\n\n        samples = input_items[0] #rename input\
      \ samples\n        symbol_buffer = []       #storage for each block of samples\n\
      \n        #iterate for all samples\n        for i, sample in enumerate(samples):\n\
      \n            #add to sample block\n            symbol_buffer.append(samples[i])\n\
      \n            #if block is full continue processing\n            if len(symbol_buffer)\
      \ > self.window:\n\n                \n                #correlation and reset\
      \ of buffer\n                corr_data = np.correlate(symbol_buffer, symbol_buffer,\
      \ \"full\")\n                symbol_buffer = []\n\n                #output correlation\
      \ samples\n                for j in range(len(corr_data)-1):\n             \
      \       output_items[0][j] = corr_data[j]\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    window: '1024'
  states:
    _io_cache: '(''Correlation/Synch Block'', ''blk'', [(''window'', ''1.0'')], [(''0'',
      ''complex'', 1)], [(''0'', ''complex'', 1)], ''\n    initialize the block\n    params:\n        in_sig:
      input samples\n        out_sig: output samples\n        window: number of samples
      to correlate over\n    '', [''window''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [808, 180.0]
    rotation: 0
    state: enabled
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '2049'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 328.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', epy_block_1, '0']
- [analog_sig_source_x_1, '0', epy_block_1, '1']
- [blocks_throttle2_0, '0', epy_block_2, '0']
- [epy_block_1, '0', blocks_throttle2_0, '0']
- [epy_block_2, '0', qtgui_const_sink_x_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.10.0
